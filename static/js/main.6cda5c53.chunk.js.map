{"version":3,"sources":["components/DrumPad.js","components/DrumPads.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","playSound","bind","document","getElementById","this","keyData","play","refresh","id","className","onClick","src","type","React","Component","DrumPads","items","keys","Object","data","j","length","push","Display","soundLastPlayed","lastPlayed","split","App","refreshDisplay","setState","state","drumpadData","keyCode","name","sound","handleKeyDown","event","keyIdx","reduce","triggerKeyIdx","drumpadObj","i","addEventListener","removeEventListener","onKeyDown","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6cda5c53.chunk.js","sourcesContent":["import React from \"react\";\n\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.playSound = this.playSound.bind(this);\n  }\n\n  playSound() {\n    const sound = document.getElementById(`${this.props.keyData[\"name\"]}`);\n    sound.play();\n    this.props.refresh(this.props.keyData);\n  }\n\n  render() {\n    return (\n      <div\n        id={`drum-${this.props.keyData[\"name\"]}`}\n        className=\"drum-pad d-flex justify-content-center align-items-center\"\n        onClick={this.playSound}\n      >\n        <audio\n          id={`${this.props.keyData[\"name\"]}`}\n          className=\"clip\"\n          src={this.props.keyData[\"sound\"]}\n          type=\"audio/mp3\"\n        ></audio>\n        {this.props.keyData[\"name\"]}\n      </div>\n    );\n  }\n}\n\nexport default DrumPad;\n","import React from \"react\";\nimport DrumPad from \"./DrumPad\";\n\nclass DrumPads extends React.Component {\n  render() {\n    let items = [];\n    let keys = Object.keys(this.props.data);\n    for (let j = 0; j < keys.length; j++) {\n      items.push(\n        <DrumPad\n          key={j}\n          keyData={this.props.data[keys[j]]}\n          refresh={this.props.refresh}\n        />\n      );\n    }\n    return (\n      <div id=\"drum-pads\" className=\"grid\">\n        {items}\n      </div>\n    );\n  }\n}\n\nexport default DrumPads;\n","import React from \"react\";\n\nconst Display = (props) => {\n  let soundLastPlayed = \"\";\n  if (Object.keys(props.lastPlayed).length !== 0) {\n    soundLastPlayed = props.lastPlayed[\"sound\"].split(\"/\");\n  }\n  return (\n    <div id=\"display\">\n      {soundLastPlayed ? soundLastPlayed[soundLastPlayed.length - 1] : \"\"}\n    </div>\n  );\n};\n\nexport default Display;\n","import React from \"react\";\nimport DrumPads from \"./components/DrumPads\";\nimport Display from \"./components/Display\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drumpadData: [\n        {\n          keyCode: 81,\n          name: \"Q\",\n          sound:\n            \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\",\n        },\n        {\n          keyCode: 87,\n          name: \"W\",\n          sound: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\n        },\n        {\n          keyCode: 69,\n          name: \"E\",\n          sound: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\n        },\n        {\n          keyCode: 65,\n          name: \"A\",\n          sound: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\",\n        },\n        {\n          keyCode: 83,\n          name: \"S\",\n          sound: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\",\n        },\n        {\n          keyCode: 68,\n          name: \"D\",\n          sound: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\n        },\n        {\n          keyCode: 90,\n          name: \"Z\",\n          sound: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\n        },\n        {\n          keyCode: 88,\n          name: \"X\",\n          sound: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\n        },\n        {\n          keyCode: 67,\n          name: \"C\",\n          sound: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\",\n        },\n      ],\n      lastPlayed: {},\n    };\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.refreshDisplay = this.refreshDisplay.bind(this);\n  }\n\n  handleKeyDown(event) {\n    let keyIdx = this.state.drumpadData.reduce(\n      (triggerKeyIdx, drumpadObj, i) => {\n        if (drumpadObj[\"keyCode\"] === event.keyCode) {\n          triggerKeyIdx = i;\n        }\n        return triggerKeyIdx;\n      },\n      -1\n    );\n    if (keyIdx >= 0) {\n      const sound = document.getElementById(\n        `${this.state.drumpadData[keyIdx][\"name\"]}`\n      );\n      sound.play();\n      this.refreshDisplay(this.state.drumpadData[keyIdx]);\n    }\n  }\n\n  refreshDisplay = (keyData) => {\n    this.setState({\n      lastPlayed: keyData,\n    });\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  render() {\n    return (\n      <div id=\"drum-machine\" onKeyDown={this.handleKeyDown}>\n        <DrumPads data={this.state.drumpadData} refresh={this.refreshDisplay} />\n        <Display lastPlayed={this.state.lastPlayed} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./styles.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}